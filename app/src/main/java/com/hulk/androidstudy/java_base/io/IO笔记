Java I/O系统
1.File类
1）File是一个使用类库工具，可以帮我们处理文件目录问题。它既能代表一个特定文件的名称，又能代表一个目录。
2）File的list方法可以获取到File指向的文件集，它也可以接受一个FilenameFilter过滤器，来筛选出符合条件的文件
集。这是一个策略模式的例子。FilenameFilter接口只有一个accept方法，它接受一个代表某个特定文件所在目录的File
对像和特定文件名的String。通过正则表达式的matcher对象来判断这个文件名是否符合正则要求。
总结：
list():获取目录下的所有文件名称
list(FilenameFilter filter)：获取使用筛选器后的目录下的所有文件名称
listFiles()：获取目录下的所有文件对象
listFiles(FilenameFilter filter):获取使用文件名筛选器后的目录下的所有文件对象
listFiles(FileFilter filter)：获取使用文件筛选器后的目录下的所有文件对象
getCanonicalFile():获取文件的规范文件
3）File类不仅仅可以代表文件或目录，也可以用File对象来创建目录或整个目录路径。还可以查看文件特性，检查某个File
对象代表的时文件还是目录，并可以删除文件。下面展示一些方法：
canRead():判断是否可读；
canWrite():判断是否可写；
getName():获取文件名称或目录名称
getParent():获取父目录名称
getPath():获取目录名称
length():获取文件长度
lastModified():目录名上次修改时间，时间戳
isFile():判断File对象代表的是否是文件
isDirectory():判断File对象代表的是否时目录
renameTo(rname)：重命名
exists():判断File对象代表的文件或目录是否存在
delete():删除File对象代表的文件或目录
mkdirs():创建File对象代表的文件或目录包如果父目录也不存在也创建父目录
mkdirs():创建File对象代表的目录或文件

2.输入和输出
在JDK1.0中，所有的输入相关类都应从InputStream继承，所有与输出相关的类都应该从OutputStream继承。
1）InputStream类型的作用是用来表示从不同数据元产生输入的类，这些数据源包括：字节数组，String对象，文件，“管道”，
一个由其他种类的流组成的序列，其他数据源（网络连接等）。
每种数据元都对应一个InputStream的子类，FilterInputStream是一个“装饰器”基类：
ByteArrayInputStream：允许将内存的缓冲区当作InputStream使用，就是将接受的byte数组以流的概念进行包装，方便对
数据的操作。
StringBufferInputStream：将String转换成流。(废弃)
FileInputStream：将文件转换为流。
PipeInputStream：“管道”的数据转换为流
SequenceInputStream：将两个或多个流对象转成一个流对象
FilterInputStream：装饰器基类，有BufferInputStream、DataInputStream、PushbackInputStream子类。

3.添加属性和有用的接口
1)通过FilterInputStream从InputStream读取数据：
DataInputStream：可以读取基本数据类型。
BufferedInputStream：在内存中创建一个输入流的缓冲区
LineNumberInputStream：跟踪输入流中的行号
PushbackInputStream：可以将读到的最后一个字符回退，供编译器的扫描器使用。

4.Reader和Writer
Java 1.1对基本的I/O流类库进行了重大修改，增加了面向字符并兼容Unicode的Reader和Writer。
1）数据的来源和去处：
InputStream                       Reader 适配器：InputStreamReader，将IS转为Reader
OutputStream                      Writer 适配器：OutputStreamWriter，将OS转为Writer
FileInputStream                   FileReader
FileOutputStream                  FileWriter
StringBufferInputStream           StringReader
ByteArrayInputStream              CharArrayReader
ByteArrayOutputStream             CharArrayWriter
PipedInputStream                  PipedReader
PipedOutputStream                 PipedWriter
两个不同的层次结构的接口非常相识
2)更改流的行为，字符流对装饰器子类来修改“流”以满足需求的类的层次结构和字节流不完全相同。
FilterInputStream                 FilterReader
FilterOutputStream                FilterWriter(抽象类，没有子类)
BufferedInputStream               BufferedReader(也有readLine())
BufferedOutputStream              BufferedWriter
DataInputStream                   使用DataInputStream（如果需要readLine，用BufferedReader）
PrintStream                       PrintWriter
LineNumberInputStream(弃用)       LineNumberReader
StreamTokenizer                   StreamTokenizer(使用接受Reader的构造器)
PushbackInputStream               PushbackReader
3）未发生变化的类
DataOutputStream
File
RandomAccessFile
SequenceInputStream

5.RandomAccessFile
1)适用于由大小已知的记录组成的文件，可以使用seek()将记录从一处移动到另一处，然后读取或者修改记录。
2）RandomAccessFile不是InputStream或OutputStream继承层次结构中的一部分。它直接从Object派生而来。
3）本质上来说，RandomAccessFile的工作方式类似于把DataInputStream和DataOutputStream组合使用，还添加了一些方法。

6.I/O流的经典使用方式
1)缓冲输入文件：BufferedReader in = new BufferedReader(new FileReader(filename));
如果要想打开一个文件用于字符输入，可以使用以String或File对象作为文件名的FileReader。
2)从内存输入
3)格式化内存输入，要读取格式化数据可以使用DataInputStream。
4)基本的文件出，FileWriter对象可以向文件写入数据。
5)存储和恢复数据，要保证读写时的流对应。
6)读取随机访问文件

7.文件读写的使用工具

8.标准I/O
1）按照标准I/O模型，Java提供了System.in、System.out和System.err.
2）System.out已经被包装成了printStream对象，System.err同样也是PrintStream，但是System.in却是一个未被包装
过的未经加工的InputStream。
3）我们可以立即使用System.out和System.err，但是需要对System.in进行包装
4）通常我们需要readLine()一次一行地读取输入，可以将System.in包装成BufferedReader来使用，这要求我们必须用InputStream
把System.in转换成Reader。

9.进程控制
10.新I/O
11.压缩
12.对象序列化
1）Java的对象序列化将实现了Serializable接口的对象转换成一个字节序列，并能够在以后将这个字节序列完全恢复为原来
的对象。
2）对象序列化的概念加入到语言中是为了支持两种主要特性：Java的远程方法调用（RMI），Java Beans来说，对象的序列化
是必须的。
3）对象序列化后再反序列化时获取的是一个Object的引用，所以使用时需要向下转型
4）对象序列化不仅保存了对象本身的数据，还能对对象包含的引用进行序列化。这种情况有时成为“对象网”。
5）寻找类，在反序列化时必须保证被序列化的对象能被虚拟机找到
6）当由特殊序列化需求时，可以使用Externalizable接口代替实现对序列化的控制。如果操作的是一个Serializable对象，
可以用transient关键字逐个地关闭序列化。
7）还用一种控制序列化化的方式：实现Serizlizable接口，并添加名为writeObject和readObject的方法。
8）只要将任何对象序列化到单一流中，就可以恢复出与写入时一样的对象网，并且不可能出现重复的对象。
9）如果想保存系统状态，最安全的做法是将序列化操作作为“原子”操作。
10）静态的成员属性不会自动序列化，需要用户手动操作。
13.XML
1）更具互操性的序列化解决方案是将数据装维XML格式。
14.Preferences
15.总结